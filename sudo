#!/bin/bash

home_var='/data/data/com.termux/files/'

# ===Start Functions===
show_help(){
  echo -e "\e[1mVirtual Designer Sudo Script "$(cat ${home_var}'usr/etc/sudoers.d/version.yml')"\e[0m"
  echo -e "   sudo [options] <command>\n"
  echo -e "  Currantly Supported Options:\n"
  echo -e "         sudo -h | --help: Show this help and exit"
  echo -e "         sudo -v | --version: Show the currant version of sudo"
  echo -e "         sudo -u | --update: Check & Install Updates of Sudo"
  echo -e "         sudo -r | --remove: Uninstall Sudo"
  exit;
}

uninstall_sudo(){
  
        echo -en "\e[1;32m[!]\e[0m This will uninstall sudo. Do you want to continue?[Y/n] "
          read choice
          echo ""
          if [[ $choice == "Y" ]] || [[ $choice == "y" ]];
          then
            echo "Uninstalling sudo..."
            bash ${home_var}"usr/etc/sudoers.d/remove.exec"
          else
            echo "Abort.";
          fi
          exit;
}

update_sudo(){
          command wget https://raw.githubusercontent.com/virtual-designer/termux-sudo-without-root/master/sudoers.d/version.yml > /dev/null 2>&1
          new_v=$(cat version.yml)
          curr_v=$(cat ${home_var}'usr/etc/sudoers.d/version.yml')
          rm version.yml
          if [[ $new_v != $curr_v ]];
          then
            echo -en "\e[1;32m[!]\e[0m An update of sudo was found! Do you want to continue?[Y/n] "
            read choice2
            echo ""
            if [[ $choice2 == "Y" ]] || [[ $choice2 == "y" ]];
            then
              git clone http://github.com/virtual-designer/termux-sudo-without-root > /dev/null 2>&1
              cd termux-sudo-without-root/
              bash "sudoers.d/remove.exec" > /dev/null 2>&1
              bash "install.exec"
              cd ../
              rm -R termux-sudo-without-root/
            else
              rm -R termux-sudo-without-root/
              echo "Aborted."
            fi
          else 
            echo "You are using the latest version of sudo.";
            rm -R termux-sudo-without-root/
          fi
        exit;
}

# ===End Functions===


   cat_pass=$(cat ${home_var}'usr/etc/sudoers' | grep -w ${USER} | head -n1)
   if [[ $cat_pass == '' ]];
   then
	echo -e "The user '"${USER}"' is not in sudoers group."
	exit 2
   fi

PASSWD=${cat_pass}

if [[ $1 != '' ]] && [[ $1 != "-"* ]];
then
  if [[ $PASSWD == 'root|All|'* ]];
  then
    check_config=$(cat ${home_var}'usr/etc/sudoers.d/config.yml')
    if [[ $check_config == "exec_as_root: false" ]];
    then
      command $@
    else
      command su -c $@
    fi
   exit;
  fi
  echo -en '[sudo] password for '${USER}': '
  read -s password
  echo -e ''
  processed_data=${USER}'|All|'${password}
  if [[ $processed_data == $PASSWD ]];
  then
    check_config=$(cat ${home_var}'usr/etc/sudoers.d/config.yml')
    if [[ $check_config == "exec_as_root: false" ]];
    then
      command $@
    else
      command su -c $@
    fi
  else
    echo -e '\nSorry, password does not match. Please try again.'
    exit 2
   fi
else
   # Options
      if [[ $1 == "--"* ]];
      then
        case $1 in
         "--help" )
           show_help;
         ;;
        "--version" )
            echo -e $(cat ${home_var}'usr/etc/sudoers.d/version.yml')" (Apache Software License)"
            exit;
        ;;
        
        "--remove" )
          uninstall_sudo;
        ;;
        
        
        "--update" )
          update_sudo;
        ;;
        
         * )
           show_help;
         ;;
        esac
      fi 
   if [[ $1 == "-"* ]];
   then
      case $1 in
      "-h" )
        show_help;
      ;;
      
      "-v" )
        echo -e $(cat ${home_var}'usr/etc/sudoers.d/version.yml')" (Apache Software License)"
        exit
      ;;
      
      "-r" )
        uninstall_sudo;
      ;;
      
      "-u" )
        update_sudo;
      ;;
      
       * )
        show_help;
       ;;
      esac
      
    else
     show_help;
   fi
fi
